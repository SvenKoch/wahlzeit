package org.wahlzeit.model.coordinate;

import java.util.HashMap;

/*
 * @PatternInstance(
 * 	patternName = "Value Object"
 * 	participants = {
 * 		"ValueObject"
 *  }
 * )
 */
public class CartesianCoordinate extends AbstractCoordinate {
	
	// Cartesian coordinates in km
	private final double x;
	private final double y;
	private final double z;
	
	private static HashMap<CartesianCoordinate, CartesianCoordinate> instances = new HashMap<CartesianCoordinate, CartesianCoordinate>();
	private static final double DELTA = 1e-6;


	public static CartesianCoordinate getInstance(double x, double y, double z){
		CartesianCoordinate coord = new CartesianCoordinate(x, y, z);
		// unsynchronized check, as we can get around locking, if the entry is already present within the HashMap (read-only)
		CartesianCoordinate shared = instances.get(coord);
		if(shared == null){
			synchronized (instances) {
				// we need to check again, as the last check was not synchronized!
				shared = instances.get(coord);
				if(shared == null){
					shared = coord;
					instances.put(shared, shared);
				}
			}
		}
		return shared;
	}
	
	/**
	 * @methodtype constructor
	 * @param x cartesian coordinate x in km
	 * @param y cartesian coordinate y in km
	 * @param z cartesian coordinate z in km
	 */
	private CartesianCoordinate(double x, double y, double z){
		assertValidDouble(x);
		assertValidDouble(y);
		assertValidDouble(z);
		this.x = x;
		this.y = y;
		this.z = z;
	}
	
	protected double doGetDistance(CartesianCoordinate other){
		assertNotNull(other);
		double dx = other.getX()-this.x;
		double dy = other.getY()-this.y;
		double dz = other.getZ()-this.z;
		
		return Math.sqrt(dx*dx + dy*dy + dz*dz);
	}
	
	public boolean isEqual(CartesianCoordinate other) {
		assertNotNull(other);
		return this.doGetDistance(other) < DELTA;
	}

	@Override
	public CartesianCoordinate asCartesianCoordinate() {
		return this;
	}

	/**
	 * @methodtype get
	 */
	public double getX() {
		return x;
	}

	/**
	 * @methodtype get
	 */
	public double getY() {
		return y;
	}

	/**
	 * @methodtype get
	 */
	public double getZ() {
		return z;
	}

	/*
	 * generated by Eclipse
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		long temp;
		temp = Double.doubleToLongBits(x);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(y);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(z);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}


	/*
	 * generated by Eclipse
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CartesianCoordinate other = (CartesianCoordinate) obj;
		if (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))
			return false;
		if (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))
			return false;
		if (Double.doubleToLongBits(z) != Double.doubleToLongBits(other.z))
			return false;
		return true;
	}

}
